- name: Check time is in the right format
  assert:
    that:
      - open_access_time.split(':')[0] | int >= 0 and open_access_time.split(':')[0] | int <= 23
      - open_access_time.split(':')[1] | int >= 0 and open_access_time.split(':')[1] | int <= 59
      - close_access_time.split(':')[0] | int >= 0 and close_access_time.split(':')[0] | int <= 23
      - close_access_time.split(':')[1] | int >= 0 and close_access_time.split(':')[1] | int <= 59
    fail_msg: "Time format is not correct"

- name: Set timezone
  ansible.builtin.timezone:
    name: "{{ timezone }}"

- name: Remove ufw
  ansible.builtin.package:
    name: ufw
    state: absent

- name: Install firewalld
  ansible.builtin.package:
    name:
      - firewalld
      - conntrack
    state: present

- name: Ensure firewalld is enabled and started
  ansible.builtin.service:
    name: firewalld
    enabled: yes
    state: started

- name: Allow ssh and rdp
  ansible.builtin.firewalld:
    service: "{{ item }}"
    permanent: yes
    state: enabled
    immediate: yes
  with_items:
    - ssh
    - rdp

- name: Set automatic open access
  cron:
    name: "automatic open access {{ item }}"
    minute: "{{ open_access_time.split(':')[1] }}"
    hour: "{{ open_access_time.split(':')[0] }}"
    job: "firewall-cmd --add-port={{ item }}/tcp --permanent && firewall-cmd --reload"
    user: root
    state: present
  with_items:
    - 22  # SSH
    - 3389  # RDP

- name: Set automatic close access
  cron:
    name: "automatic close access {{ item }}"
    minute: "{{ close_access_time.split(':')[1] }}"
    hour: "{{ close_access_time.split(':')[0] }}"
    job: >
      conntrack -D -p tcp --dport {{ item }} &&
      iptables -A INPUT -p tcp --dport {{ item }} -j DROP &&
      firewall-cmd --remove-port={{ item }}/tcp --permanent &&
      firewall-cmd --reload
    user: root
    state: present
  with_items:
    - 22  # SSH
    - 3389  # RDP
